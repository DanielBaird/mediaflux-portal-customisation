
// # Styling a MediaFlux portal


// ## About this document #######################################
//
// #### Purpose
//
// This document describes the default web style applied to
// Mediaflux portals, and serves as a springboard for modifying
// the styles to produce unique portal experiences.
//
// Light modification is possible by changing colour and size 
// settings, and enough instruction is also provided for someone
// with some web design skills to perform deeper customisations.
//
// #### Audience
//
// Generally this document assumes you're familiar with the 
// basics of CSS and the HTML Document Object Model.  If you 
// learned HTML and CSS a while ago, an appendix at the end of 
// this document will give you a quick overview of any new or
// obscure CSS techniques used in this document.
//
// TODO: add appendix; get someone to look through and highlight
// anything they aren't too sure on; document in appendix.
//
// #### Source
//
// This document is written in a "literate" style, where the 
// source document is both live Sass/SCSS source that produces 
// the CSS, and a Markdown-formatted document describing the
// code.
//
// Visit 
// [styles.scss](https://github.com/DanielBaird/mediaflux-portal-customisation/blob/master/styles/sass/styles.scss)
// to see the source document.
//
// The source document is already valid SCSS, so CSS is produced
// by running it through the Sass compiler.

 /*
The original source of the text you're reading is a SCSS formatted 
file.  SCSS is a superset of CSS; it allows all valid CSS, but in 
addition allows for a number of variables calculations that are 
resolved by the SCSS compiler and turned into valid CSS.

To alter the CSS, you should edit the SCSS source file and 
recompile.  Visit the website:
https://github.com/DanielBaird/mediaflux-portal-customisation
for more information.
 */

// (The text above will be included in the output CSS to inform
// anyone browsing the CSS about the SCSS source.)
//
// The source is then transformed with a short shell script,
// which does two things:
// 
// * finds lines starting with `//`, and removes those two 
//   initial characters;
// * indents all other lines by four spaces.
//
// These two transformations produce a Markdown document which is
// then converted into a HTML document with a Markdown processor.

// ## Variables #################################################

// Much simple customisation of portal sites can be achieved by
// editing variables in this section.

// #### Overall page level variables

// Default the general page colours to to white background and 
// dark text (not quite black, to avoid harsh contrast).
//
$page-background: #fff;
$page-color: #333;

// when printing, reset text to black to avoid the blurry 
// "process" grey many printers use.
//
$page-print-background: $page-background;
$page-print-color: #000;

// The maximum width of the page is defined here as 55 root
// ems wide, which is roughly 120 letters.
//
$column-max-width: 55rem;

// On a wide screen, list-of-items type portal pages will show
// a sidebar column next to the content column. The preferred
// width of the sidebar is set to 15 root ems.
$sidebar-width: 13rem;

// On a narrower screen, the sidebar becomes a sort of *top-*bar.
// The minimum width of the content column is added to the
// preferred width of the sidebar set earlier to work out when
// to switch to two-column layout.
//
$content-min-width: $sidebar-width * 3;

// The standard background and text colour for the main content
// column.
//
$content-background: $page-background;
$content-color: $page-color;

// Choose a shading colour for doing subtle shading within the
// content area (this is used for source code, blockquotes, etc) 
$content-shading: transparentize($content-color, 0.95);

// #### Form controls

// How big should controls like buttons be?  This will be used
// for the height of text inputs, the minimum width of buttons,
// etc
$control-size: 2rem;
$control-border: 1px dotted blue;
$control-active-background: #d0e9ff;
$control-active-background: #ffa;
$control-background: $content-background;


// #### Header related variables

// The height of the page header and the size of the heading 
// inside the page header.  If you update these values, make 
// sure the `$header-height` value is larger than the 
// `$header-text-size` value.
//
$header-height: calc(3rem + 5vw);
$header-text-size: calc(1rem + 1vw);

// Header colors
//
$header-background: #555;
$header-content-color: white;

// It's preferable to use a vector format 
// like SVG for your site logo, but if you're using a pixel 
// format logo that you prefer doesn't get resized, set the
// `$resizeable-logo` variable to `false` and specify your logo
// size in the `$logo-height` and `$logo-width` variables.
//
// If `$resizeable-logo` is set to `true`, the logo will be 
// sized according to the header. 
//
$resizable-logo: true;
$logo-height: 65px;
$logo-width: 65px;

// The height of the main navigation bar is set here using `rem`
// units, which are proportional to the standard text size.
//
$navbar-height: 3rem;
$navbar-text-size: 1rem;

// Navbar items have three states: normal, selected (the one 
// that matches the current content), and highlighted (for
// when the user's mouse is hovering over it).
//
$navbar-background: #000;
$navbar-content-color: #ccc;

$navbar-highlight-background: $navbar-content-color;
$navbar-highlight-content-color: $navbar-background;

$navbar-current-background: $content-background;
$navbar-current-content-color: $content-color;

// The collection bar
//
$collection-bar-background: #ccc;
$collection-bar-content-color: $page-color;

// The size and colour of the page footer.
//
$footer-height: 3rem;
$footer-text-size: 1rem;

$footer-background: $page-background;
$footer-content-color: $page-color; 

// If you set `footer-fade` to true, the footer will appear 
// faded until the user hovers over it with their mouse.  This
// helps to reduce the visual clutter of the footer. Note however
// that mouse hover won't work on touch screens without a mouse,
// so choose colours with readable contrast even when faded to
// half opacity.
//
// Disable fade by setting this variable to `false`.
//
$footer-fade: true;


// ## Sass utilities ############################################
//
// These general purpose elements are used in several places,
// and so are grouped here.

// clearfix: this solves the spilling-out problem.
@mixin clearfix {
	&::after {
		content: "";
		display: block;
		clear: both;
	}
} 


// ## Setting sane defaults #####################################
//
// Web browsers don't agree in how to format many elements of a
// web page.
// 
// Normalize.css is a third party project that provides a set
// of CSS rules that provides a consistent set of styles for
// all browsers.
//
// [necolas.github.io/normalize.css/](http://necolas.github.io/normalize.css/)
//
// In this case, to get Sass to import the Normalize.css source
// as inline css, `normalize.css` should already be renamed to 
// `normalize.scss` by an earlier step in the build process.
//
@import "normalize.scss";

// ##### Font family default
// 
// Use the OS's default font if we can.  As of 2016, OS default 
// fonts are generally quite similar (humanist sans serifs with 
// a large x-height and open counters) so this is unlikely to 
// run into any significant size differences, but will look 
// familiar and modern to users.
//
html {
	font-family: 
        -apple-system,       /* default macOS font for Safari/webkit */ 
        BlinkMacSystemFont,  /* default macOS font for Chrome/blink */
        "Segoe UI",          /* default Windows font */
        "Roboto",            /* default Android font */
        "Fira Sans",         /* default Mozilla font */
        "Droid Sans",        /* default older Android font */
        "Helvetica Neue",    /* everyone else */
        sans-serif;          /* Blackberry users, lol */
}

// ##### Font size default
//
// Use the CSS calc() feature to give the HTML tag a font size 
// that grows as the width of the viewport grows. This helps 
// the portal to display nicely on phone screens.
//
// Requires `<meta name="viewport" content="width=device-width, minimum-scale=1, initial-scale=1">`
// in the `head` of the page to stop a bit of "helpful" zooming
// browsers on small screen phones do.
//
html {
	font-size: 16px; /* for browsers that don't support calc() */
	font-size: calc(16px + 0.25vw); /* grow font size on wider screen */
	overflow-x: hidden; /* avoid odd widths on narrow screens */
}

// This tag sets the default text and background colour for 
// normal display, and when printing.  Colours are described in 
// the Variables section.
//
body {
    color: $page-color;
    background-color: $page-background;
}
@media print {
    body {
        color:$page-print-color;
        background: $page-print-background;
    }
}

// ##### Heading size and spacing reset
//
// Set the font weight and size of all headings to be the same
// as their containers, and reset all heading margins and
// padding.
//
h1, h2, h3, h4, h5, h6 {
    font-weight: inherit;
    font-size: inherit;
    margin: 0;
    padding: 0;
}

// ##### Navigation spacing reset
//
// Navigation sections of a page usually occur in `ul` tags that 
// are inside `nav` tags.  So here we switch off padding,
// margin, and bullets for `ul` tags inside `nav` tags.
//
nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
}

// ##### Body wrapper
//
// The `mf-body-wrapper` class is used on a `div` that wraps the 
// entire page content. You might use it to set a page width. In 
// this styling however it isn't used.
// 
.mf-body-wrapper {
	// ...
}

// ## Buttons and form controls #################################

// Buttons and similar form controls should look similar across
// the portal.  This section defines the standard look.

// Reset the margins and padding on forms.
//
form {
	margin: 0;
	padding: 0;
}

// This selector applies to text-type inputs, even the cool ones 
// like `type="number"`.
//
.mf-button, input:not([type=submit]):not([type=file]) {
	border: $control-border;
	background: $control-background;
	height: $control-size;
	line-height: $control-size;
	border-radius: 0;
	font-family: inherit;
	cursor: pointer;
	display: inline-block;
	vertical-align: middle;
	padding: 0 0.5rem; // button padding is reset below
	// border-radius: $control-size / 2;

	&:focus {
		background: $control-active-background;
		outline: none;
	}
}

.mf-button {
	padding: 0 0.1rem;
	min-width: $control-size;
	text-align: center;
}
.mf-button:hover {
	color: rgb(100,149,237);
	border-color: rgb(100,149,237);
}

// ## Page header ###############################################

// All Mediaflux portal pages start with a `header` tag like
// this: `<header class="mf-header" role="banner">`. The `role`
// attribute identifies the tag as containing site-oriented 
// content rather than page-specific content.
//
// TODO: describe setting content in config file
//
// This header is the appropriate place to include any 
// institution-wide banners, navigation bars etc.
//
.mf-header {
	background: $header-background;
	color: $header-content-color;
	white-space: nowrap;
	text-align: center;
}

//
// The portal plugin will not automatically generate a heading 
// or logo, but those items are supplied in the sample portal 
// configuration, so styling for them are supplied here.
//
.mf-heading {
	color: inherit;
	display: inline-block;
	vertical-align: middle;
	font-size: $header-text-size;
	line-height: $header-height;
	font-weight: 200; /* very light font weight */
    letter-spacing: 0.1ch; /* slightly airy letter spacing */
}

//
// Check the notes in the *Page layout variables* section for 
// information about setting the size of the logo.
//
.mf-header-logo {
	display: inline-block;
	vertical-align: middle;
	margin: 0 1vw;
    @if ($resizable-logo) {
        max-height: $header-text-size;
        max-width: $header-text-size;
    } @else {
        height: $logo-height;
        width: $logo-width;        
    }
}


// ## Page navigation ###########################################

// The main page navigation – between static pages, or 
// sub-collections of assets – is included in the page as a `nav`
// element with the class `mf-navbar`.
//
.mf-navbar {
    font-size: $navbar-text-size;
	background: $navbar-background;
}

// Inside the `nav.mf-navbar` is a `div.mf-navbar-container`.
// This styling uses the `div` to set the display width for the
// navigation links.

.mf-navbar-container {
	max-width: $column-max-width;
	margin: 0 auto;
}

// Inside the `div.mf-navbar-container` is a `ul.mf-nav-list`.
// This contains one `li` for each nav link.  This styling uses
// a flexbox layout to stretch the navlinks across the width of
// the column.  On a wide display, they'll all have equal widths;
// on a narrow display, they'll take the space they need.
//
.mf-nav-list {
	display: flex;
	flex-direction: row;
	border: 1px solid transparentize($navbar-content-color, 0.66);
	border-width: 0 1px;
}
.mf-nav-list li {
	color: $navbar-content-color;
	text-align: center;
	flex-grow: 1;
	line-height: $navbar-height;
	transition: 0.25s;
	&:hover {
		background: $navbar-highlight-background;
		color: $navbar-highlight-content-color;
	}
	&.mf-current-nav-item {
		background: $navbar-current-background;
		color: $navbar-current-content-color;
	}
	a {
		color: inherit;
		display: block;
		text-decoration: none;
	}
}


// ## Page content ##############################################

// All portal pages use a wrapper div around the main content 
// with a `mf-page` class, so this set of styling applies to the
// content area on all page types.
//
// The side padding given here is mostly hard to notice on wider
// screens, but on narrow screens it is this padding that keeps
// content from touching the edges of the screen.
//
.mf-page {
	background: $content-background;
	color: $content-color;
	max-width: $column-max-width;
	margin: 0 auto;
	padding: 0 1rem 3rem;
}

// ## Footer ####################################################

// All Mediaflux portal pages end with a `footer` tag like this:
// `<footer class="mf-footer">`.  The content is supplied from
// the configuration file; this styling assumes that the footer
// content is a single line of text.
//
.mf-footer {
	background: $footer-background;
	color: $footer-content-color;
	font-size: $footer-text-size;
	line-height: $footer-height;
	text-align: center;
	border-top: 1px solid $footer-content-color;
	white-space: nowrap;

// This section allows the footer to fade in and out according
// to mouse hover, if the `$footer-fade` variable is set to 
// `true`.
//
    @if ($footer-fade) {
		opacity: 0.5;
		transition: 0.25s;
		&:hover {
			opacity: 1;
		}
    }
}

// ## Static page content #######################################
//
// Static pages are laid out as a heading, rendered as a `h1` tag
// like this: `<h1 class="mf-static-page-title" id="mf-page-title">`
// followed by the content in a `div` tag with a 
// `mf-static-page-content` class.
//
// On a static page, the content wrapping div that carries a 
// `mf-page` class has an additional class of `mf-static-page`.  
.mf-static-page {
	padding-top: 2rem;
}

// The title is styled in a manner similar to a `h4` tag in the 
// content (the position and spacing of the title means its 
// significance is clear without having to make it any larger).
// 
// Like the in-content headings, this styling uses the CSS 
// `calc(...)` function to scale along with the size of the 
// window.
//
.mf-static-page-title {
	font-size: 1.333rem; 
	font-size: calc(1.333rem + 0.666vw); 
	font-weight: 600;
	padding: 1rem 0;
}

// The content of a static portal page can be any HTML specified
// in the config file, so the rules below apply some generally 
// appropriate styles to standard HTML content. 

.mf-static-page-content {

// ##### Lext sizing and spacing
//
// Set a default line height, and give headings and paragraphs 
// some padding.  Headings get tighter line spacing.
// 
	line-height: 1.5;

	p {
		padding: 0.5em 0;
		margin: 0;
	}

	h1, h2, h3, h4, h5, h6 {
		line-height: 1.15;
		padding: 1em 0 0.5rem;
		margin: 0;
	}

// Heading sizes are calculated here starting with a "Perfect 
// Fourths" proportion of 4:3, essentially multiplying each 
// size by 1.333 to get the next.
//
// This web tool is a convenient way to generate scaled sizes:
// [type-scale.com](http://type-scale.com/?scale=1.333&font-family=BlinkMacSystemFont)
//
// `h5` and `h6` headings are both the same size as normal text;
// `h5`s are bolded, and `h6`s are italicised.
// 
// The `calc(...)` function is used here to make the headings
// proportionally larger on large screens.  This means that as
// page size increases, heading size will increase over and 
// above the standard font size increase.  The effect of this
// is clean clear headings on a desktop, but still readable
// headings on phone screens.
//
	h1 { font-size: 3.157rem; font-size: calc(3.157rem + 0.711vw); font-weight: 100; }
	h2 { font-size: 2.369rem; font-size: calc(2.369rem + 0.533vw); font-weight: 200; }
	h3 { font-size: 1.778rem; font-size: calc(1.778rem + 0.400vw); font-weight: 400; }
	h4 { font-size: 1.333rem; font-size: calc(1.333rem + 0.300vw); font-weight: 600; }
	h5 { font-size: 1.000rem; font-size: calc(1.000rem + 0.000vw); font-weight: 800; }
	h6 { font-size: 1.000rem; font-size: calc(1.000rem + 0.000vw); font-style: italic; }

// ##### Monospaced text
//
// Add some background shading to `code`, `pre` preformatted 
// text, and `kbd` keyboard input to help distinguish them from 
// normal text.
// 
// Text inside `<pre>` tags also get made slightly smaller, with
// tighter line spacing.
//
	code, pre, kbd {
		background: $content-shading;
	}
	code {
		padding: 0.1em 0.33em;
		border-radius: 0.2em;
	}
	pre {
		font-size: 90%;
		line-height: 1.3;
		max-width: 100%;
		overflow: auto;
		margin: 0;
	}

// ##### Block quotes
//
// Blockquotes are indented, with a left border, and a big curly 
// quote.  The text is slightly smaller and has tighter line 
// spacing.
//
// If you're a developer or grammarian you might feel 
// uncomfortable about the lack of closing quotes; I do to, but 
// it's cleaner and less cluttered looking without, and there's 
// a fairly strong convention for having just an opening quote.
//
	blockquote {
		font-size: 90%;
		line-height: 1.3;
		margin: 0.5em 0;
		padding: 1em 0 1em 2em;
		border-left: 0.33em solid $content-shading;
	}

// Tiny detail: if you use `<p>` tags in your blockquote, the
// paragraph padding on top makes the blockquote's top padding
// look too big.  So this line strips padding from the first
// `<p>` in a blockquote.
//
	blockquote > p:first-child {
		padding-top: 0;
	}

// For bigger quote marks, make this number higher.  To remove
// the quote marks, you can delete the following section of SCSS.
//
	$blockquote-quote-size: 4;

	blockquote { position: relative; }
	blockquote:before, blockquote:after {
		position: absolute;
		top: 0.1em / $blockquote-quote-size;
		opacity: 0.1;
		font-size: 1em * $blockquote-quote-size;
		font-family: cursive;
		font-weight: bold;
		font-style: italic;
	}
	blockquote:before {
		content: '\201c'; /* left 66 quotes */ 
		left: 0.1em / $blockquote-quote-size;
	}

// This next section, commented out, is how you would add a
// closing quote mark to blockquotes.  Trust me though, it looks
// better without.

	// blockquote:after {
	// 	opacity: 0.05;
	// 	content: '\201d'; /* right 99 quotes */
	// 	right: 0.4em / $blockquote-quote-size;
	// }

// ##### Lists
//
// Bulletted lists are common in general content.  These rules
// control space between list items for normal lists and lists
// inside other lists.
//
	ul, ol { padding: 0.25em 0 0.25em 0; }
	ul ul, ol ol { padding: 0 0 0 1.5em; }
	li {
		padding: 0.1em 0;
		list-style-position: inside;
	}

// Set the progression of bullets to square, circle, disc, square.
//
	li { list-style-type: square; }
	li li { list-style-type: circle; }
	li li li { list-style-type: disc; }
	li li li li { list-style-type: square; }

// This final closing bracket is the end of the formatting rules
// for static page content.

}


// ## Collection page content ###################################

//
// On a collection page, the content wrapping div that carries a 
// `mf-page` class has an additional class of `mf-list-page`.
//
// In this styling there is a small gap between the navbar above
// and the collection bar.
//
.mf-list-page {
	padding-top: 1rem;
}

// ### Collection bar
//
// This page section is a sort of heading area for the list of
// items being displayed.
//
.mf-collection-bar {
	@include clearfix;
	background: $collection-bar-background;
	color: $collection-bar-content-color;
	padding: 1rem;
}

// The collection bar has two parts, a title for the current 
// collection, and some controls.  This style puts the title on
// the left, the controls on the right, and makes the bar the
// right height to fit the controls.
// 
// The title gets it size from the controls.  This is the most
// genuine "title" in the sense that it describes the content
// the user is seeing, so although this styling avoids bold 
// fonts on big headings, this title is the bold exception that
// makes it all worth it :)
//
.mf-collection-title {
	line-height: $control-size;
	float: left;
	font-size: $control-size * 0.66;
	font-weight: 800;
}

// The collection actions includes a search box and a "make new
// asset" button.  This styling pushes it all to the right edge,
// and gives each item a bit of space on the right side.
//
.mf-collection-actions {
	float: right;
	text-align: right;
}
.mf-collection-actions > * {
	display: inline-block;
	margin-left: 1rem;
}

// The search box includes an SVG icon of a magnifying glass.
// It's included inline here, giving you that giant block of 
// numbers.
//
// The `text-shadow` gives the searched-for text a nice clean
// edge even when it overlaps the background icon.
//
// If you prefer a search box with rounded ends -- a common 
// convention a few years ago, particularly in Mac software -- 
// un-comment the line about `border-radius`.
//
.mf-action-search input[type="search"] {
	// border-radius: $control-size / 2;
	text-shadow: 
		0 0 2px $control-background,
		0 0 4px $control-background;
    background-size: $control-size * 0.75, $control-size * 0.5;
    background-position: right $control-size / 4;
    background-repeat: no-repeat;
	background-image: url('data:image/svg+xml;utf8,<svg height="10" width="15" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 375 251" enable-background="new 0 0 251 251"><path d="M244.186 214.604l-54.379-54.378c-.289-.289-.628-.491-.93-.76 10.7-16.231 16.945-35.66 16.945-56.554 0-56.837-46.075-102.912-102.911-102.912s-102.911 46.075-102.911 102.911c0 56.835 46.074 102.911 102.91 102.911 20.895 0 40.323-6.245 56.554-16.945.269.301.47.64.759.929l54.38 54.38c8.169 8.168 21.413 8.168 29.583 0 8.168-8.169 8.168-21.413 0-29.582zm-141.275-44.458c-37.134 0-67.236-30.102-67.236-67.235 0-37.134 30.103-67.236 67.236-67.236 37.132 0 67.235 30.103 67.235 67.236s-30.103 67.235-67.235 67.235z" fill="#999" fill-rule="evenodd" clip-rule="evenodd"/></svg>');}


// ## Sidebar ###################################################

// The sidebar holds controls allowing the user to filter the
// list of items.  To fit properly on mobile screens, the sidebar
// gets styled here as if it will sit across the top of the
// content; later, this styling will use a `@media` query to move
// the sidebar to the left side when the screen is wide enough. 
//
.mf-collection-sidebar {
	background: $content-shading;
}

// Each facet in the sidebar is contained within a `fieldset` tag
// that looks like `<fieldset class="mf-facet-selector">`.
//
.mf-facet-selector {
	border: $control-border;
	border-width: 1px 0 0;
	margin: 1rem 0;
} 

// The name given to the facet uses a `legend` tag like this:
// `<legend class="mf-facet-title">`.
//
.mf-facet-title {
	padding: 0.33em 0.5em;
}

// Individual selectable facets within a facet selection fieldset
// are wrapped in label tags like this: 
// `<label class="mf-facet mf-facet-checkbox">` ..or if it is a
// "choose one only" type facet, using `mf-facet-radio` instead
// of `mf-facet-checkbox`.
//
// This styling also gives the facet a highlight using the colour
// selected for `$control-active-background` when hovered over
// with a mouse.
//
.mf-facet {
	display: block;
	padding-left: 1em;
	&:hover {
		background: $control-active-background;
	}
}

// The span tag contains the labelling text of the facet; here
// the height and alignment are set to match the checkbox or
// radio button.
//
.mf-facet span { 
	padding-left: 0.33em;
	display: inline-block; 
	vertical-align: middle;
}

// ### Sidebar, on a wide screen

// The `@media` statement below means that the rules inside it
// will only apply when the page is at least the specified width.
//
@media (min-width: $sidebar-width + $content-min-width) {
	.mf-collection-sidebar {
		width: $sidebar-width;
		// border: 1px solid red;
	}
}

// ## Appendix: Sass and CSS refresher ##########################
//
// TODO
// 
// ### SCSS
// 
// * functions: transparentize(), 
//
// ### CSS
//
// * six-char colours and three-char colour shorthand
// * rem units
// * vw and vh units
// * calc(...)
// * transition
// * linear-gradient(...)
// 

