
// # Styling a MediaFlux portal

// ## About this document #######################################
//
// #### Purpose
//
// This document describes the default web style applied to
// Mediaflux portals, and serves as a springboard for modifying
// the styles to produce unique portal experiences.
//
// Light modification is possible by changing colour and size
// settings, and enough instruction is also provided for someone
// with some web design skills to perform deeper customisations.
//
// #### Audience
//
// Generally this document assumes you're familiar with the
// basics of CSS and the HTML Document Object Model.  If you
// learned HTML and CSS a while ago, an appendix at the end of
// this document will give you a quick overview of any new or
// obscure CSS techniques used in this document.
//
// #### Source
//
// This document is written in a "literate" style, where the
// source document is both live Sass/SCSS source that produces
// the CSS, and a Markdown-formatted document describing the code.
//
// Visit
// [styles.scss](https://github.com/DanielBaird/mediaflux-portal-customisation/blob/master/styles/sass/styles.scss)
// to see the source document.
//
// The source document is already valid SCSS, so CSS is produced
// by running it through the Sass compiler.  **This source 
// document and a Sass compiler are all you need to produce the
// CSS that customises your Mediaflux portal.**
//
// There are several online sites that will compile Sass into
// CSS for you.  These sites worked well:
// * [sassmeister.com](http://www.sassmeister.com/)
// * [beautifytools.com](http://beautifytools.com/scss-compiler.php)
// * [sass.js.org](http://sass.js.org/)
//
// (The text below will be included in the output CSS.)
//

 /*!
The original source of the text you're
reading is an SCSS formatted file. SCSS 
is a superset of CSS with additional 
features that are resolved into valid 
CSS by an SCSS compiler.

To alter this CSS, you should obtain 
the SCSS source file and recompile it.
Visit the website:
https://github.com/DanielBaird/mediaflux-portal-customisation
for more information.
 */

// Documentation is produced by transforming the same source 
// into a web page with a few simple steps:
//
// * find lines starting with `//`, and remove those two
//   initial characters;
// * indent all other lines by four spaces.
//
// These steps produce a Markdown document which may be converted 
// into a HTML document with a Markdown processor.
//
// Visit the site mentioned above for the conversion script and 
// more.

// ## Variables #################################################

// Simple customisation of portal sites can be achieved by
// editing variables in this section.  Check the appendix for
// a description of how CSS specifies colour; corporate style 
// guides usually give CSS compatible specifications for brand 
// colours.

// <svg class="diag"><use class="highlight" xlink:href="#diag"></use></svg>
// #### Overall page level variables

// Text size
//
// Most of the page layout is adjusted to suit the size of
// text on the page.  Set this to `small`, `medium`, or `large`.
// 
// Remember that although smaller text usually looks "nicer",
// the users of your portal are there to get information by 
// reading text. They may not have perfect vision, and may not
// have a screen as nice as yours.
//
$text-size: medium;

// Default the general page colours to to white background and
// dark text (not quite black, to avoid harsh contrast).
//
$page-background: #fff;
$page-color: #333;

// when printing, reset text to black to avoid the blurry
// "process" grey many printers use.
//
$page-print-background: $page-background;
$page-print-color: #000;

// The `$column-max-width` variable below defines the maximum 
// width of the page as 57 root ems wide, which is roughly 
// 120 letters.  (An appendix later in this document describes 
// `em`s, `rem`s and other CSS units).
//
// On a wide screen, list-of-items type portal pages will show
// a sidebar column next to the content column. The preferred
// width of the sidebar is set to 14 root ems in the variable 
// `$sidebar-width`.
//
// The `$content-spacing` variable defines whitespace between 
// major elements of the page.  Pixels are free, so don't be 
// too stingy with this.
//
// On a narrower screen, the sidebar becomes a sort of *top-*bar.
// The minimum width of the content column is added to the
// preferred width of the sidebar to work out whether to use a 
// two-column or one-column layout.
//
// The sum of `$sidebar-width`, `$content-min-width`, and
// `$content-spacing` should be strictly less than the value
// you give `$column-max-width`.
//
$column-max-width: 57rem;
$sidebar-width: 14rem;
$content-min-width: $sidebar-width * 2.5;
$content-spacing: 3rem;

// The standard background and text colour for the main content
// column.
//
$content-background: $page-background;
$content-color: $page-color;

// Choose a shading colour for doing subtle shading within the
// content area (this is used for source code, blockquotes, etc)
//
$content-shading: transparentize($content-color, 0.95);

// #### Form controls

// How big should controls like buttons be?  This will be used
// for the height of text inputs, the minimum width of buttons,
// etc.
//
$control-size: 2rem;

// The colours used for controls include a default background,
// and an "active" background for activated or hovered controls.
//
$control-background: $content-background;
$control-content-color: $content-color;
$control-active-background: #ffa;
$control-active-content-color: $control-content-color;

// The border on form controls helps to distinguish the control
// as an interaction point.  Brightly coloured controls can
// usually go without a border.
//
// Square corners on buttons etc looks more modern, but a
// little rounding helps to identify the button or textbox as
// something you can interact with.  Set this to your preferred
// corner radius.
//
$control-border: 1px solid #aaa;
$control-corner-radius: 0.125rem;


// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-head"></use></svg>
// #### Header related variables

// The height of the page header and the size of the heading
// inside the page header.  If you update these values, make
// sure the `$header-height` value is larger than the
// `$header-text-size` value.
//
$header-height: calc(3rem + 5vw);
$header-text-size: calc(1rem + 1vw);

// Header colors
//
$header-background: #555;
$header-content-color: white;

// It's preferable to use a vector format
// like SVG for your site logo, but if you're using a pixel
// format logo that you prefer doesn't get resized, set the
// `$resizeable-logo` variable to `false` and specify your logo
// size in the `$logo-height` and `$logo-width` variables.
//
// If `$resizeable-logo` is set to `true`, the logo will be
// sized according to the header.
//
$resizable-logo: true;
$logo-height: 65px;
$logo-width: 65px;


// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-nav"></use></svg>
// #### Navbar
//
// The height of the main navigation bar is set here using `rem`
// units, which are proportional to the standard text size.
//
$navbar-height: 3rem;
$navbar-text-size: 1rem;

// Navbar items have three states: normal, selected (the one
// that matches the current content), and highlighted (for
// when the user's mouse is hovering over it).
//
$navbar-background: #000;
$navbar-content-color: #ccc;

$navbar-highlight-background: $navbar-content-color;
$navbar-highlight-content-color: $navbar-background;

$navbar-current-background: $content-background;
$navbar-current-content-color: $content-color;

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-collbar"></use></svg>
// #### Collection bar
//
// The collection bar has background and text colours.
//
$collection-bar-background: #ccc;
$collection-bar-content-color: $page-color;

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-side"></use></svg>
// #### Sidebar
//
// The sidebar includes facet filters; if you set a
// background for the sidebar, you probably don't want
// a background for the facets, and vice versa.
//
$sidebar-background: transparent;
$sidebar-content-color: $page-color;
$sidebar-facet-background: #f8f8f8;

// #### Content related items

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-res"></use></svg>
// ##### Result cards
//
// The details of each result in a result list are shown within
// a visual container. Here the background colour and border
// properties of that container are set.
//
$result-background: #eee;

// Set `$result-border-width` to `0` to have no border.  Try
// `1px` for a thin edge.  Set `$result-corner-radius` if your
// result cards should have rounded corners (try `3px` for a 
// subtle rounding, or `0.5rem` for a playing card type corner).

$result-border-color: #ccc;
$result-border-width: 0;
$result-corner-radius: 0;

// To produce a physical "card" effect for result items, you can
// choose to have a
// [drop shadow](https://en.wikipedia.org/wiki/Drop_shadow)
// effect applied by setting `$result-dropshadow` to the desired
// shadow colour (try `$result-border-color`).
//
// Switch off the drop shadow by setting `$result-dropshadow to
// the special value `none`.

$result-dropshadow: $result-border-color;
$result-dropshadow: none;

// ###### Thumbnails
//
// Each asset's thumbnail image will be displayed at this
// size. Use a larger size, e.g. `9rem`, if the thumbnails are
// important distinguishers for the assets in your collections;
// use a smaller size, e.g. `5rem` or `3rem`, if thumbnails are
// less help in distinguishing assets from each other.
//
// If your thumbnails need pixel-perfect resolution, set this
// to match the thumbnail size declared in your configuration XML
// by default, `150px`).  To support high-resolution "retina"
// displays, set your XML to double this number (e.g. use `300`
// as the size in your portal XML, and `150px` as the size here).
//
// TODO: confirm default pixel size
//
/* $thumbnail-size: 7rem; */
$thumbnail-size: 150px;

// Thumbnails also receive a border.

$thumbnail-border-color: $content-background;
$thumbnail-border-width: 0.5rem;

// Set this `thumbnail-fit` variable to how you want your
// thumbnail images to fit their display space.
//
// Mediaflux will create square thumbnails by default so in
// most cases you can leave this set to `none`.
//
// * `none`: don't trim any of the thumbnail, shrinking it as
// necessary so the entire thumbnail image fits into the box
// (possibly leaving some empty space in the thumbnail box)
// * `horizontal`: zoom the thumbnail to exactly fit the
// width, leaving the top and bottom of the thumbnail to have
// some blank space (if it's a wide thumbnail) or spill over the
// edges and be clipped (if it's a tall thumbnail)
// * `vertical`: zoom the thumbnail to exactly fit the
// height, leaving the sides of the thumbnail to have some blank
// space (if it's a tall thumbnail) or spill over the edges and
// be clipped (if it's a wide thumbnail)
//
$thumbnail-fit: vertical;


// ###### Download button
//
// This styling allows three positions for the download button.
//
// If downloading assets is a significant aspect of the portal 
// you're designing, use `wide` and the download button will
// stretch the width of the result item box.
// 
// If you don't want the download button to appear, set this to 
// `hidden` (note that this is not a security measure -- assets 
// are still accessible).
//
// The other two settings are `left` and `right` for aligning the
// download button to one side or the other.  For significantly
// visual assets use `right` to put the download button under
// the thumbnail; for less visual assets, use `left` to align the
// button under the asset's metadata.
//
$download-button-position: wide;

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-foot"></use></svg>
// #### Footer
//
// The size and colour of the page footer.
//
$footer-height: 3rem;
$footer-text-size: 1rem;

$footer-background: $page-background;
$footer-content-color: $page-color;

// If you set `footer-fade` to true, the footer will appear
// faded until the user hovers over it with their mouse.  This
// helps to reduce the visual clutter of the footer. Note however
// that mouse hover won't work on touch screens without a mouse,
// so choose colours with readable contrast even when faded to
// half opacity.
//
// Disable fade by setting this variable to `false`.
//
$footer-fade: true;

// ## End of variables ##########################################
//
// For most customisations, this is as far as you need to go.
// You can now run this document through a Sass compiler, and
// you will get a CSS file you can apply to a Mediaflux portal.


// ## Setting sane defaults #####################################
//
// Web browsers don't agree in how to format many elements of a
// web page.
//
// Normalize.css is a third party project that provides a set
// of CSS rules that ensure consistent base styles for all 
// browsers.  The following chunk of source code is all of the 
// *Normalize.css* rules -- there's no need to modify or 
// understand these rules.
//

 /*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */
button,hr,input{overflow:visible}
audio,canvas,progress,video{display:inline-block}
progress,sub,sup{vertical-align:baseline}
[type=checkbox],[type=radio],legend{box-sizing:border-box;padding:0}
html{font-family:sans-serif;line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}
body{margin:0}
article,aside,details,figcaption,figure,footer,header,main,menu,nav,section{display:block}
h1{font-size:2em;margin:.67em 0}
figure{margin:1em 40px}
hr{box-sizing:content-box;height:0}
code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}
a{background-color:transparent;-webkit-text-decoration-skip:objects}
a:active,a:hover{outline-width:0}
abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}
b,strong{font-weight:bolder}
dfn{font-style:italic}
mark{background-color:#ff0;color:#000}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative}
sub{bottom:-.25em}
sup{top:-.5em}
audio:not([controls]){display:none;height:0}
img{border-style:none}
svg:not(:root){overflow:hidden}
button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}
button,select{text-transform:none}
[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}
[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}
[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:ButtonText dotted 1px}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{color:inherit;display:table;max-width:100%;white-space:normal}
textarea{overflow:auto}
[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}
[type=search]{-webkit-appearance:textfield;outline-offset:-2px}
[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}
::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}
summary{display:list-item}
[hidden],template{display:none}
 /*! end of normalize.css */

// ##### Font family default
//
// Use the OS's default font if we can.  As of 2016, OS default
// fonts are generally quite similar (humanist sans serifs with
// a large x-height and open counters) so this is unlikely to
// run into any significant size differences, but will look
// familiar and modern to users.
//
html {
	font-family:
		'.SFNSDisplay-Regular', /* "display" version of macOS font */
        -apple-system,       /* default macOS font for Safari/webkit */
        BlinkMacSystemFont,  /* default macOS font for Chrome/blink */
        "Segoe UI",          /* default Windows font */
        "Roboto",            /* default Android font */
        "Fira Sans",         /* default Mozilla font */
        "Droid Sans",        /* default older Android font */
        "Helvetica Neue",    /* everyone else */
        sans-serif;          /* Blackberry users, lol */
}

// ##### Font size default
//
// Use the CSS calc() feature to give the HTML tag a font size
// that grows as the width of the viewport grows. This helps
// the portal to display nicely on phone screens.
//
// Requires 
// `<meta name="viewport" content="width=device-width, minimum-scale=1, initial-scale=1">`
// in the `head` of the page to stop a bit of "helpful" zooming
// browsers on small screen phones do.
//
html {
	overflow-x: hidden; /* avoid odd widths on narrow screens */

	@if ($text-size == small) {
		font-size: 13px; /* for browsers that don't support calc() */
		font-size: calc(11px + 0.35vw); /* grow font size on wider screen */
	} @else if ($text-size == large) {
		font-size: 19px; /* for browsers that don't support calc() */
		font-size: calc(17px + 0.35vw); /* grow font size on wider screen */
	} @else {
		font-size: 16px; /* for browsers that don't support calc() */
		font-size: calc(14px + 0.35vw); /* grow font size on wider screen */
	}
}

// This tag sets the default text and background colour for
// normal display, and when printing.  Colours are described in
// the Variables section.
//
// Refer to the appendix in this document for information about
// the `@media` command.
//
body {
    color: $page-color;
    background-color: $page-background;
}
@media print {
    body {
        color:$page-print-color;
        background: $page-print-background;
    }
}

// ##### Heading size and spacing reset
//
// Set the font weight and size of all headings to be the same
// as their containers, and reset all heading margins and
// padding.
//
h1, h2, h3, h4, h5, h6 {
    font-weight: inherit;
    font-size: inherit;
    margin: 0;
    padding: 0;
}

// ##### Navigation spacing reset
//
// Navigation sections of a page usually occur in `ul` tags that
// are inside `nav` tags.  So here we switch off padding,
// margin, and bullets for `ul` tags inside `nav` tags.
//
nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
}

// ##### Body wrapper
//
// The `mf-body-wrapper` class is used on a `div` that wraps the
// entire page content. You might use it to set a page width. In
// this styling however it isn't used.
//
.mf-body-wrapper {
	// ...
}

// ## Buttons and form controls #################################

// Buttons and similar form controls should look similar across
// the portal.  This section defines the standard look.

// Reset the margins and padding on forms.
//
form {
	margin: 0;
	padding: 0;
}

// This `input:not(...)` selector applies to text-type inputs,
// even the cool ones like `type="number"`.
//
.mf-button, input:not([type=submit]):not([type=file]) {
	border: $control-border;
	background: $control-background;
	color: $control-content-color;
	height: $control-size;
	line-height: $control-size;
	border-radius: 0;
	font-family: inherit;
	cursor: pointer;
	display: inline-block;
	vertical-align: middle;
	padding: 0 0.5rem; // button padding is reset below
	border-radius: $control-corner-radius;
	transition: background-color 0.25s;

	&:focus, &:hover {
		background: $control-active-background;
		color: $control-active-content-color;
		outline: none;
	}
}

.mf-button {
	padding: 0 0.1rem;
	min-width: $control-size;
	text-align: center;
}
/*
.mf-button:hover {
	color: rgb(100,149,237);
	border-color: rgb(100,149,237);
}
*/

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-head"></use></svg>
// ## Page header ###############################################

// All Mediaflux portal pages start with a `header` tag like
// this: `<header class="mf-header" role="banner">`. The `role`
// attribute identifies the tag as containing site-oriented
// content rather than page-specific content.
//
// TODO: describe setting content in config file
//
// This header is the appropriate place to include any
// institution-wide banners, navigation bars etc.
//
.mf-header {
	background: $header-background;
	color: $header-content-color;
	white-space: nowrap;
	text-align: center;
}

//
// The portal plugin will not automatically generate a heading
// or logo, but those items are supplied in the sample portal
// configuration, so styling for them is supplied here.
//
.mf-heading {
	color: inherit;
	display: inline-block;
	vertical-align: middle;
	font-size: $header-text-size;
	line-height: $header-height;
	font-weight: 200; /* very light font weight */
    letter-spacing: 0.1ch; /* slightly airy letter spacing */
}

//
// Check the notes in the *Page layout variables* section for
// information about setting the size of the logo.
//
.mf-header-logo {
	display: inline-block;
	vertical-align: middle;
	margin: 0 1vw;
    @if ($resizable-logo) {
        max-height: $header-text-size;
        max-width: $header-text-size;
    } @else {
        height: $logo-height;
        width: $logo-width;
    }
}


// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-nav"></use></svg>
// ## Page navigation ###########################################

// The main page navigation – between static pages, or
// sub-collections of assets – is included in the page as a `nav`
// element with the class `mf-navbar`.
//
.mf-navbar {
    font-size: $navbar-text-size;
	background: $navbar-background;
}

// Inside the `nav.mf-navbar` is a `div.mf-navbar-container`.
// This styling uses the `div` to set the display width for the
// navigation links.

.mf-navbar-container {
	max-width: $column-max-width;
	margin: 0 auto;
}

// Inside the `div.mf-navbar-container` is a `ul.mf-nav-list`.
// This contains one `li` for each nav link.  This styling uses
// a flexbox layout to stretch the navlinks across the width of
// the column.  On a wide display, they'll all have equal widths;
// on a narrow display, they'll take the space they need.
//
.mf-nav-list {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	border: 1px solid transparentize($navbar-content-color, 0.66);
	border-width: 0 1px;
}
.mf-nav-list li {
	color: $navbar-content-color;
	padding: 0 0.25em;
	text-align: center;
	flex-grow: 1;
	line-height: $navbar-height;
	transition: background-color 0.25s;
	&:hover {
		background: $navbar-highlight-background;
		color: $navbar-highlight-content-color;
	}
	&.mf-current-nav-item {
		background: $navbar-current-background;
		color: $navbar-current-content-color;
	}
	a {
		color: inherit;
		display: block;
		text-decoration: none;
	}
}


// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-content"></use></svg>
// ## Page content ##############################################

// All portal pages use a wrapper div around the main content
// with a `mf-page` class, so this set of styling applies to the
// content area on all page types.
//
// The side padding given here is mostly hard to notice on wider
// screens, but on narrow screens it is this padding that keeps
// content from touching the edges of the screen.
//
.mf-page {
	background: $content-background;
	color: $content-color;
	max-width: $column-max-width;
	margin: 0 auto;
	padding: 0 1rem 3rem;
}

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-foot"></use></svg>
// ## Footer ####################################################

// All Mediaflux portal pages end with a `footer` tag like this:
// `<footer class="mf-footer">`.  The content is supplied from
// the configuration file; this styling assumes that the footer
// content is a single line of text.
//
.mf-footer {
	background: $footer-background;
	color: $footer-content-color;
	font-size: $footer-text-size;
	line-height: $footer-height;
	text-align: center;
	border-top: 1px solid $footer-content-color;
	white-space: nowrap;

// This section allows the footer to fade in and out according
// to mouse hover, if the `$footer-fade` variable is set to
// `true`.
//
    @if ($footer-fade) {
		opacity: 0.5;
		transition: 0.25s;
		&:hover {
			opacity: 1;
		}
    }
}

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-content"></use></svg>
// ## Static page content #######################################
//
// Static pages are laid out as a heading, rendered as a `h1` tag
// like this: `<h1 class="mf-static-page-title" id="mf-page-title">`
// followed by the content in a `div` tag with a
// `mf-static-page-content` class.
//
// On a static page, the content wrapping div that carries a
// `mf-page` class has an additional class of `mf-static-page`.
.mf-static-page {
	padding-top: 2rem;
}

// The title is styled in a manner similar to a `h4` tag in the
// content (the position and spacing of the title means its
// significance is clear without having to make it any larger).
//
// Like the in-content headings, this styling uses the CSS
// `calc(...)` function to scale along with the size of the
// window.
//
.mf-static-page-title {
	font-size: 1.333rem;
	font-size: calc(1.333rem + 0.666vw);
	font-weight: 600;
	padding: 1rem 0;
}

// The content of a static portal page can be any HTML specified
// in the config file, so the rules below apply some generally
// appropriate styles to standard HTML content.

.mf-static-page-content {

// ##### Text sizing and spacing
//
// Set a default line height, and give headings and paragraphs
// some padding.  Headings get tighter line spacing.
//
	line-height: 1.5;

	p {
		padding: 0.5em 0;
		margin: 0;
	}

	h1, h2, h3, h4, h5, h6 {
		line-height: 1.15;
		padding: 1em 0 0.5rem;
		margin: 0;
	}

// Heading sizes are calculated here starting with a "Major 
// Third" proportion of 5:4, essentially multiplying each
// size by 1.25 to get the next.
//
// This web tool is a convenient way to generate scaled sizes:
// [type-scale.com](http://type-scale.com/?scale=1.250&font-family=BlinkMacSystemFont)
//
// `h5` and `h6` headings are both the same size as normal text;
// `h5`s are rendered very bold (using `font-weight: 800`), and 
// `h6`s are italicised.
//
// The `calc(...)` function is used here to make the headings
// proportionally larger on large screens.  This means that as
// page size increases, heading size will increase over and
// above the standard font size increase.  The effect of this
// is clean clear headings on a desktop, but still readable
// headings on phone screens.
// 
// Here the additional heading size is a doubling proportion 
// of the page width (2:1).
//
	h1 { font-size: 2.441rem; font-size: calc(2.441rem + 1.600vw); font-weight: 100; }
	h2 { font-size: 1.953rem; font-size: calc(1.953rem + 0.800vw); font-weight: 200; }
	h3 { font-size: 1.563rem; font-size: calc(1.563rem + 0.400vw); font-weight: 400; }
	h4 { font-size: 1.250rem; font-size: calc(1.250rem + 0.200vw); font-weight: 600; }
	h5 { font-size: 1.000rem; font-size: calc(1.000rem + 0.000vw); font-weight: 800; }
	h6 { font-size: 1.000rem; font-size: calc(1.000rem + 0.000vw); font-style: italic; }

// ##### Monospaced text
//
// Add some background shading to `code`, `pre` preformatted
// text, and `kbd` keyboard input to help distinguish them from
// normal text.
//
// Text inside `<pre>` tags also get made slightly smaller, with
// tighter line spacing.
//
	code, pre, kbd {
		background: $content-shading;
	}
	code {
		padding: 0.1em 0.33em;
		border-radius: 0.2em;
	}
	pre {
		font-size: 90%;
		line-height: 1.3;
		max-width: 100%;
		overflow: auto;
		margin: 0;
	}

// ##### Block quotes
//
// Blockquotes are indented, with a left border, and a big curly
// quote.  The text is slightly smaller and has tighter line
// spacing.
//
// If you're a developer or grammarian you might feel
// uncomfortable about the lack of closing quotes; I do too, but
// it's cleaner and less cluttered looking without, and there's
// a fairly strong convention for having just an opening quote.
//
	blockquote {
		font-size: 90%;
		line-height: 1.3;
		margin: 0.5em 0;
		padding: 1em 0 1em 2em;
		border-left: 0.33em solid $content-shading;
	}

// Tiny detail: if you use `<p>` tags in your blockquote, the
// paragraph padding on top makes the blockquote's top padding
// look too big.  So this line strips padding from the first
// `<p>` in a blockquote.
//
	blockquote > p:first-child {
		padding-top: 0;
	}

// For bigger quote marks, make this number higher.  To remove
// the quote marks, you can delete the following section of SCSS.
//
	$blockquote-quote-size: 4;

	blockquote { position: relative; }
	blockquote:before, blockquote:after {
		position: absolute;
		top: 0.1em / $blockquote-quote-size;
		opacity: 0.1;
		font-size: 1em * $blockquote-quote-size;
		font-family: cursive;
		font-weight: bold;
		font-style: italic;
	}
	blockquote:before {
		content: '\201c'; /* left 66 quotes */
		left: 0.1em / $blockquote-quote-size;
	}

// This next section, commented out, is how you would add a
// closing quote mark to blockquotes.  Trust me though, it looks
// better without.

	// blockquote:after {
	// 	opacity: 0.05;
	// 	content: '\201d'; /* right 99 quotes */
	// 	right: 0.4em / $blockquote-quote-size;
	// }

// ##### Lists
//
// Bulletted lists are common in general content.  These rules
// control space between list items for normal lists and lists
// inside other lists.
//
	ul, ol { padding: 0.25em 0 0.25em 0; }
	ul ul, ol ol { padding: 0 0 0 1.5em; }
	li {
		padding: 0.1em 0;
		list-style-position: inside;
	}

// Set the progression of bullets to square, circle, disc, square.
//
	li { list-style-type: square; }
	li li { list-style-type: circle; }
	li li li { list-style-type: disc; }
	li li li li { list-style-type: square; }

// This final closing bracket is the end of the formatting rules
// for static page content.

}


// ## Collection page content ###################################

//
// On a collection page, the content wrapping div that carries a
// `mf-page` class has an additional class of `mf-list-page`.
//
// In this styling there is a gap between the navbar above
// and the collection bar.
//
.mf-list-page {
	padding-top: 2rem;
}

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-collbar"></use></svg>
// ### Collection bar
//
// This page section is a sort of heading area for the list of
// items being displayed.
//
.mf-collection-bar {
	background: $collection-bar-background;
	color: $collection-bar-content-color;
	padding: 1rem;

	/* clearfix: http://cssmojo.com/the-very-latest-clearfix-reloaded/ */
	&::after {
		content: " ";
		display: block;
		clear: both;
	}
}

// The collection bar has two parts, a title for the current
// collection, and some controls.  This style puts the title on
// the left, the controls on the right, and makes the bar the
// right height to fit the controls.
//
// The title gets it size from the controls.  This is the most
// genuine "title" in the sense that it describes the content
// the user is seeing, so although this styling avoids bold
// fonts on big headings, this title is the bold exception that
// makes it all worth it :)
//
.mf-collection-title {
	line-height: $control-size;
	float: left;
	font-size: $control-size * 0.66;
	font-weight: 800;
}

// The collection actions includes a search box and a "make new
// asset" button.  This styling pushes it all to the right edge,
// and gives each item a bit of space on the right side.
//
.mf-collection-actions {
	float: right;
	text-align: right;
}
.mf-collection-actions > * {
	display: inline-block;
	margin-left: 1rem;
}

// The width of the search box can be up to `22em`s, but the
// `max-width` line will make it shorter so it's never wider
// then 60% of the width of the page.
//
// If you prefer a search box with rounded ends -- a common
// convention a few years ago, particularly in Mac software --
// un-comment the line about `border-radius`.
//
// The search box includes an SVG icon of a magnifying glass.
// The SVG image is included inline here.
//
// The `text-shadow` gives the searched-for text a nice clean
// edge even when it overlaps the background icon.
//
.mf-action-search input[type="search"] {
	width: 22em;
	max-width: 60vw;
	// border-radius: $control-size / 2;
	background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 11 11" stroke="#{$control-content-color}"><circle fill="none" cx="4" cy="4" r="3"/><line x1="6" y1="6" x2="9.5" y2="9.5"/></svg>');
    background-size: $control-size * 0.5, $control-size * 0.5;
    background-position: right $control-size/4 top $control-size/4;
    background-repeat: no-repeat;
	text-shadow:
		0 0 2px $control-background,
		0 0 4px $control-background,
		0 0 6px $control-background;
}

// The 'new asset' button by default simply shows the word "new".
// The following styling replaces that text with a symbol.
// If you prefer the 'new asset' button to show the text instead
// of the symbol, remove the following section.
//
// Good options for a new button include:
// - `274a`: ❊ eight teardrop-spoked propeller asterisk
// - `2600`: ☀ black sun with rays
// - `263c`: ☼ white sun with rays
//
// ..or use an SVG image.
 
.mf-new-item-button {
    min-width: $control-size;
    position: relative;
    overflow: hidden;
    color: rgba(0,0,0, 0);
    &:hover { color: rgba(0,0,0, 0); }
    &:before {
        color: $control-content-color;
        content: '\274a'; /* 274a: ❊ eight teardrop-spoked propeller asterisk */
        position: absolute;
        top: 0; bottom: 0; left: 0; right: 0;
    }
}


// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-side"></use></svg>
// ## Sidebar ###################################################

// The sidebar holds controls allowing the user to filter the
// list of items.  To fit properly on mobile screens, the sidebar
// gets styled here as if it will sit across the top of the
// content; later, this styling will use a `@media` query to move
// the sidebar to the left side when the screen is wide enough.
//
// The style rules immediately below are simply setting the
// colours.
//
.mf-collection-sidebar {
	background: $sidebar-background;
	color: $sidebar-content-color;
}

// Each facet in the sidebar is contained within a `fieldset` tag
// that looks like `<fieldset class="mf-facet-selector">`.
//
.mf-facet-selector {
	background: $sidebar-facet-background;
	border: none;
	border-top: $control-border;
	margin: 2rem 0;
}

// The name given to the facet uses a `legend` tag like this:
// `<legend class="mf-facet-title">`.
//
.mf-facet-title {
	border-radius: 2px;
	padding: 0.33em 0.5em;
}

// Individual selectable facets within a facet selection fieldset
// are wrapped in label tags like this:
// `<label class="mf-facet mf-facet-checkbox">` ..or if it is a
// "choose one only" type facet, using `mf-facet-radio` instead
// of `mf-facet-checkbox`.
//
// This styling also gives the facet a highlight using the colour
// selected for `$control-active-background` when hovered over
// with a mouse.
//
// A final visual enhancement is using `transition`s to fade the
// background highlight out.
//
.mf-facet {
	display: block;
	padding-left: 1em;
	transition: background-color 0.25s;

	&:hover {
		background: $control-active-background;
		transition: background-color 0s;
	}
}

// The span tag contains the labelling text of the facet; here
// the height and alignment are set to match the checkbox or
// radio button.
//
.mf-facet span {
	padding-left: 0.33em;
	display: inline-block;
	vertical-align: middle;
}

// ### Sidebar, on a wide screen

// The `@media` statement below means that the rules inside it
// will only apply when the page is at least the specified width.
//
// Here, the sidebar width is set to the configured width (rather
// than using the full width of the screen), and the sidebar is
// aligned to the left.
//
@media (min-width: $sidebar-width + $content-min-width) {
	.mf-collection-sidebar {
		width: $sidebar-width;
		float: left;
	}
}

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-nav"></use></svg>
// ## Page navigation ###########################################

// Page navigation buttons are constructed as a `ul` tag inside
// a `nav`.  Each page button is a `li` inside the `ul`.

.mf-collection-paging {
	padding: 2rem 0;
}

.mf-collection-paging ul {
	text-align: right;
}

.mf-collection-paging li {
	display: inline-block;
	margin: 0 0 0 0.5rem;
}

// Some of the page navigation buttons get their text replaced
// with icons.  This styling uses Unicode characters.
//
// All the icon buttons are made square and their text content
// hidden.  Then `:before` content is added with the appropriate
// unicode character.
//
// This first block does all the common formatting for the icon
// buttons.
//
.mf-collection-paging .mf-up-button,
.mf-collection-paging .mf-refresh-page-button,
.mf-collection-paging .mf-prev-page-button,
.mf-collection-paging .mf-next-page-button
{
	width: $control-size;
	position: relative;
	overflow: hidden;
	color: rgba(0,0,0, 0);
	&:before {
		color: $control-content-color;
		content: '\25ef'; /* 25ef: ◯ LARGE CIRCLE */
		position: absolute;
		top: 0; bottom: 0; left: 0; right: 0;
		// background: inherit;
	}
}

// This block adds the custom icons to each button.
//
.mf-collection-paging {
	.mf-up-button:before           { content: '\21a5' /* 21a5: ↥ UPWARDS ARROW FROM BAR */ }
	.mf-refresh-page-button:before { content: '\21bb' /* 21bb: ↻ CLOCKWISE OPEN CIRCLE ARROW */ }
	.mf-prev-page-button:before    { content: '\2190' /* 2190: ← LEFTWARDS ARROW */ }
	.mf-next-page-button:before    { content: '\2192' /* 2192: → RIGHTWARDS ARROW */ }
}

// ### Page navigation, on a wide screen

// The `@media` statement below means that the rules inside it
// will only apply when the page is at least the specified width.
//
// Here the page navigation buttons are given a large left margin
// (to allow the sidebar to fit into that space).
//
@media (min-width: $sidebar-width + $content-min-width) {
	.mf-collection-paging {
		margin-left: $sidebar-width;
		padding-left: 1rem;
	}
}

// <svg class="diag"><use xlink:href="#diag"></use><use class="highlight" xlink:href="#diag-res"></use></svg>
// ## Listing results ###########################################

// There are two types of results; a list of assets, or a list of
// collections.  They share a wrapping div
// (`<div class="mf-result-list">`), but the nested `ul`s differ
// (`<ul class="mf-asset-list">` vs
// `<ul class="mf-collection-list">`).
//
// This styling block applies to both lists, and removes the
// default spacing.

.mf-result-list {
	padding: 0;
}

.mf-result-list > ul {
    padding: 0;
    margin: 0;
}

// ### A single result
//
// This addresses the content of the single result in the list.
//
.mf-listed-result {
	position: relative; /* for play button positoning */
	display: block;
    background: $result-background;
    margin: 1rem 0;
    padding: 1rem;
	border: 1px solid rgba(0,0,0, 0);
	border-width: $result-border-width;
	border-color: $result-border-color;
	border-radius: $result-corner-radius;

	@if ($result-dropshadow != none) {
		box-shadow: 0 0.33rem 1rem -0.25rem $result-dropshadow;
	}

	/* clearfix: http://cssmojo.com/the-very-latest-clearfix-reloaded/ */
	&::after {
		content: " ";
		display: block;
		clear: both;
	}
}
.mf-listed-result:first-child {
	// removes the top margin for the first result
	margin-top: 0;
}

// The thumbnail image is contained in a 
// `<div class="mf-result-thumbnail-wrapper">`, which is used
// here to set the size of the thumbnail.
//
// Other style rules given here supply the border and a subtle
// gradient background for cases where the thumbnail doesn't fill
// the space.
//
.mf-result-thumbnail-wrapper {
    float: right;
    margin: 0 0 1rem 0.5rem;
    position: relative;
    width: $thumbnail-size;
    height: $thumbnail-size;
    overflow: hidden;
    border: solid $thumbnail-border-width $thumbnail-border-color;
	background-color: $result-background;
	background-image: radial-gradient(
		transparentize($thumbnail-border-color, 0.8),
		transparentize($thumbnail-border-color, 0.2)
	);
}

// These style rules centre the thumbnail and apply the effect
// of the `$thumbnail-fit` variable set earlier.
//
.mf-result-thumbnail-wrapper img {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

	@if ($thumbnail-fit == vertical) {
		height: $thumbnail-size;
	} @else if ($thumbnail-fit == horizontal) {
		width: $thumbnail-size;
	} @else {
		max-width: $thumbnail-size;
		max-height: $thumbnail-size;
	}
}

// The name, or title, of the result gets the same sizing as a
// `h4` tag in static content.  If you really want result item
// titles to be a different colour, add a `color` rule to this
// section of styling.
//
.mf-result-title {
	font-size: 1.250rem;
	font-size: calc(1.250rem + 0.200vw);
	font-weight: 600;

	margin: 0.333rem 0 0.666rem;
}

// The metadata fields applicable to a result are included in
// a `<ul class=".mf-result-metadata-list">` list, one `li` tag
// per field.  Inside the `li` is a 
// `<h3 class=".mf-metadata-field">` with the name of the field, 
// and a `<div class=".mf-metadata-value">` containing the value.
//
// The styling applied here uses a tabular display, with the
// field names in a left column, and the values in the right
// column.
//
// The field name column is constrained to take at most 30% of 
// the available width; if your metadata fields have unusually
// long names, you can remove or adjust the `max-width: 30%` 
// rule from the `.mf-metadata-field` styling block.
//
.mf-result-metadata-list {
    display: table;
	padding: 0;
	margin-top: 1rem;
}
.mf-result-metadata-list li {
    padding: 0.1rem 0;
    margin: 0;
    display: table-row;
}
.mf-metadata-field {
	display: table-cell;
    font-weight: 600;
	// font-size: 90%;
	// opacity: 0.8;
	// text-transform: uppercase;
    // font-weight: 800;
    max-width: 30%;
    padding: 0.25rem;
    text-align: right;
}
.mf-metadata-value {
	display: table-cell;
    padding-left: 0.5rem;
}

// The Download and Play buttons, if present, are the last tags 
// in the result item's `li`.
//
// This styling shows the download button at the bottom of
// the result item.  Depending on the `download-button-position`
// variable set earlier, it can be left aligned, right aligned,
// hidden, or stretch the whole width of the result item. 
//
.mf-download-button {
	display: block;
	padding-left: 1em;
	padding-right: 1em;
	margin: 0.66rem auto 0;

	@if ($download-button-position == hidden) {
		display: none;
	} @else if ($download-button-position == left) {
		margin-left: 0;
	} @else if ($download-button-position == right) {
		margin-right: 0;
	} @else {
		width: 100%;
	}
}
.mf-download-button:before {
	/* 21e9: ⇩ downwards white arrow */
	/* 2b07: ⬇ downwards black arrow */
	/* 21a7: ↧ downwards arrow from bar */
	/* 2193: ↓ downwards arrow */
	/* 2913: ⤓ downwards arrow to bar */
	/* 21d3: ⇓ downwards double arrow */
	content: '\2b07'; /* 2b07: ⬇ downwards black arrow */
	margin-right: 0.5em;
}

// The Play button appears when the asset is a playable media
// type, like a movie or audio recording. When present, it is
// after the Download button.
//
// This styling relocates the play button to hover over the
// asset thumbnail.
//
// (work in progress!)
//
.mf-play-button {
	position: absolute;
	size: $thumbnail-size;
	right: 1rem;
	top: 1rem;
	border: solid $thumbnail-border-width rgba(0,0,0, 0.01);
	width: $thumbnail-size;
	height: $thumbnail-size;
	line-height: $thumbnail-size;
}
.mf-play-button:before {
	/* 25b6: ▶ black right-pointing triangle */
	/* 25ba: ► black right-pointing pointer */
	content: '\25b6'; /* 2b06: ▶ black right-pointing triangle */
}

// ### Listing results, on a wide screen
//
// The `@media` statement below means that the rules inside it
// will only apply when the page is at least the specified width.
//
// Here the result list is given a large left margin (to allow
// the sidebar to fit into that space).  This section is similar
// to the wide-screen formatting for the page navigation.
//
@media (min-width: $sidebar-width + $content-min-width) {
	.mf-result-list {
		margin-left: $sidebar-width;
		padding-left: 1rem;
	}
}

// ## Pop-up Dialogues
//
// A Mediaflux portal can allow the user to add a new asset. This
// is handled with a form that pops up over the portal web page.
//
// The form is contained in a wrapper 
// `<div class="mf-modal-wrapper">` that itself contains a
// `<div class="mf-modal-container">` which contains the form.
//
// This styling uses the `.mf-modal-wrapper` to obscure the 
// normal web page in the background, and the 
// `.mf-modal-container` to define the form.

.mf-modal-wrapper {
	display: block;
	position: fixed;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	background: rgba(255,255,255,0.8);
	background: repeating-linear-gradient(315deg,
		rgba(210,210,210,0.8),
		rgba(210,210,210,0.8) 15px,
		rgba(255,255,255,0.8) 15px,
		rgba(255,255,255,0.8) 30px
	);
	overflow: scroll;
	overflow-x: hidden;
	overflow-y: scroll;
	z-index: 1000000;
}

.mf-modal-container {
	box-sizing: border-box;
	background: #ddf6ff;
	width: min-content;
	min-width: 30rem;
	max-width: 80vw;
	max-height: 90vh;
	overflow: scroll;
	margin: 5vh auto;
	padding: 1rem;
	border: 1px solid #999;
	border-radius: 0.5rem;
	box-shadow: 0 1rem 3rem -0.5rem #000;
}

// The portal adds the `mf-modal-show` class to the body tag when
// there's a modal dialog showing. This rule uses that class to 
// make sure the content in the background doesn't scroll when 
// you're trying to scroll a long dialog.
// 
body.mf-modal-show {
	overflow: hidden;
}

.mf-modal-container video,
.mf-modal-container audio {
	max-width: 100%;
}

// ## Appendix: Sass and CSS refresher ##########################
//
// ### CSS
//
// todo intro
//
// ##### CSS Units: em, rem, vw...
//
// CSS lets the sizes of things be defined in a variety of units.
// Some of these are defined here.  Refer to 
// [Mozilla's documentation](https://developer.mozilla.org/en/docs/Web/CSS/length)
// for futher information.
// 
// - **`px`**: Pixels.  `1px` is a single pixel.
// - **`em`**: Approximately the height of the current font.  So
//   `1em` in a heading with big text is larger than `1em` in a
//   footer that has smaller text.
// - **`rem`**: "Root `em`", the size of `1em` in the page's 
//   default font size.
// - **`vw`**: one percent of the width of the browser. So a `vw`
//   is smaller when your screen is narrower, and `50vw` is half 
//   the width of your window.
//
// ##### CSS colours
//
// CSS can define colour in several ways.
//
// - **`rgb([red], [green], [blue])`**: Where `[red]`, `[green]`,
//   and `[blue]` are numbers from 0 to 255. The colour is the
//   result of combining red, green and blue in the given 
//   amounts. For example `rgb(255,165,0)` is orange (a lot of 
//   red, some green, and no blue). 
// - **`rgba([red], [green], [blue], [alpha])`**: Where `[alpha]`
//   is a number from 0 to 1.  Like `rgb(...)` but also includes 
//   some degree of transparency. An alpha of 0.0 is not at all 
//   transarent; an alpha of 1.0 is completely transparent. E.g.
//   `rgba(255,165,0, 0.5)` is a semitransparent orange.
// - **`#rrggbb`**: where each `r`, `g`, and `b` is a hexadecimal
//   digit (one of `1 2 3 4 5 6 7 8 9 a b c d e f`).  This is
//   another way to say the red, green and blue components of a
//   colour, with `rr` the hexadecimal amount of red from `00` to
//   `ff`, etc.  Eg. `#ffa500` is `ff` red, `a5` green, and `00` 
//   blue -- the same orange as before.
// - **`#rgb`**: same as `#rrggbb` but with only three digits.  
//   This is a shortcut version of `#rrggbb`; each digit gets
//   doubled to find the real result.  Eg. `#fa0` is `ff` red,
//   `aa` green, and `00` blue, which is close to our example 
//   orange.
//
// ##### Using `@media` to target CSS
//
// The CSS language allows designers to write CSS that will apply
// only in certain situations, such as when the page is being
// printed, or if the screen the page is displayed on is a 
// particular width.  The `@media` command provides this ability.
//
// This is often used to display pages with multiple columns on
// wider screens, and a single column when the screen is narrow.
//
// The 
// [Mozilla developer documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries)
// has more.
//
// ##### calc(...)
//
// todo
//
// ##### linear-gradient(...)
//
// todo
//
// ### SCSS
//
// todo intro
//
// ##### transparentize()
//
// todo
//
//

